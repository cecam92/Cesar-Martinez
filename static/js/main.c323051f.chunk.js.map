{"version":3,"sources":["components/Header/index.jsx","components/Navigation/index.jsx","components/Footer/index.jsx","containers/Home/index.jsx","routes/App.jsx","serviceWorker.js","components/reducers/RootReducer.js","index.js"],"names":["Header","className","Navegation","Nav","activeKey","Item","Link","to","eventKey","Footer","Home","useState","data","setData","props","useSpring","from","fontSize","scrolling","window","addEventListener","num","parsed","parseInt","Math","min","max","cutNumber","document","documentElement","scrollTop","console","log","useEffect","removeEventListener","div","style","App","exact","path","component","Boolean","location","hostname","match","INITIAL_STATE","RootReducer","state","action","type","store","createStore","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"qVAgBeA,G,MAbA,WACb,OACE,kBAAC,WAAD,KACE,4BAAQC,UAAU,UAChB,wBAAIA,UAAU,iBAAd,kBACA,wBAAIA,UAAU,iBAAd,8C,uBCoBOC,EAvBI,WACjB,OACE,oCACE,kBAACC,EAAA,EAAD,CAAKF,UAAU,gCAAgCG,UAAU,SACvD,kBAACD,EAAA,EAAIE,KAAL,KACE,kBAACF,EAAA,EAAIG,KAAL,KACE,kBAAC,IAAD,CAAMC,GAAG,KAAT,UAGJ,kBAACJ,EAAA,EAAIE,KAAL,KACE,kBAACF,EAAA,EAAIG,KAAL,CAAUE,SAAS,UAAnB,UAEF,kBAACL,EAAA,EAAIE,KAAL,KACE,kBAACF,EAAA,EAAIG,KAAL,CAAUE,SAAS,UAAnB,cAEF,kBAACL,EAAA,EAAIE,KAAL,KACE,kBAACF,EAAA,EAAIG,KAAL,CAAUE,SAAS,YAAnB,kBCRKC,G,MAVA,WACb,OACE,oCACE,gCACE,mE,QCuFOC,G,MAvFF,WAAO,IAAD,EACOC,mBAAS,IADhB,mBACVC,EADU,KACJC,EADI,KAEXC,EAAQC,YAAU,CAGtBC,KAAM,CAAEC,SAAU,SAClBA,SAAUL,IAQZ,SAASM,IACPC,OAAOC,iBAAiB,SAAUF,GAClCL,EARF,SAAmBQ,GACjB,IAEMC,EAASC,SAASF,GACxB,OAAOG,KAAKC,IAAID,KAAKE,IAAIJ,EAHb,GACA,KAMJK,CAAUC,SAASC,gBAAgBC,YAC3CC,QAAQC,IAAIJ,SAASC,gBAAgBC,WACrCC,QAAQC,IAAIpB,GAQd,OANAqB,qBAAU,WAER,OADAf,IACO,WACLC,OAAOe,oBAAoB,SAAUhB,MAEtC,IAED,kBAAC,WAAD,KACE,kBAAC,IAAEiB,IAAH,CAAOC,MAAOtB,GACZ,kBAAC,EAAD,OAEF,kBAAC,EAAD,MACA,qCALF,IAKgB,qCACd,qCACA,qCACA,qCACA,qCACA,qCACA,qCACA,qCACA,qCACA,qCACA,qCACA,qCACA,qCACA,qCACA,qCACA,qCACA,qCACA,qCACA,qCACA,qCACA,qCACA,qCACA,qCACA,qCACA,qCACA,qCACA,qCACA,qCACA,qCACA,qCACA,qCACA,qCACA,qCACA,qCACA,qCACA,qCACA,qCACA,qCACA,qCACA,qCACA,qCACA,qCACA,qCACA,qCACA,qCACA,qCACA,qCACA,qCACA,qCACA,qCACA,kBAAC,EAAD,S,aC1ESuB,MAVf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAW9B,OCGrB+B,QACW,cAA7BtB,OAAOuB,SAASC,UAEe,UAA7BxB,OAAOuB,SAASC,UAEhBxB,OAAOuB,SAASC,SAASC,MACvB,2D,oBClBAC,EAAgB,GAYPC,MAVf,WAAqD,IAAhCC,EAA+B,uDAAvBF,EAAeG,EAAQ,uCAClD,OAAQA,EAAOC,MACb,IAAK,GACH,MAAO,GAET,QACE,OAAOF,I,QCEPG,EAAQC,YAAYL,GAC1BM,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUJ,MAAOA,GACf,kBAAC,mBAAD,KACE,kBAAC,EAAD,SAINtB,SAAS2B,eAAe,SFgHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhC,QAAQgC,MAAMA,EAAMC,c","file":"static/js/main.c323051f.chunk.js","sourcesContent":["import React, { Fragment } from \"react\";\nimport \"./styles.scss\";\n\nconst Header = () => {\n  return (\n    <Fragment>\n      <header className=\"header\">\n        <h1 className=\"scroll-sizing\">Cesar Martinez</h1>\n        <h2 className=\"scroll-sizing\">\n          Network Engineer | Front End Developer\n        </h2>\n      </header>\n    </Fragment>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"./styles.scss\";\nimport Nav from \"react-bootstrap/Nav\";\n\nconst Navegation = () => {\n  return (\n    <>\n      <Nav className=\"justify-content-center sticky\" activeKey=\"/home\">\n        <Nav.Item>\n          <Nav.Link>\n            <Link to=\"/\">Home</Link>\n          </Nav.Link>\n        </Nav.Item>\n        <Nav.Item>\n          <Nav.Link eventKey=\"link-1\">About</Nav.Link>\n        </Nav.Item>\n        <Nav.Item>\n          <Nav.Link eventKey=\"link-2\">project 1</Nav.Link>\n        </Nav.Item>\n        <Nav.Item>\n          <Nav.Link eventKey=\"disabled\"> project 2</Nav.Link>\n        </Nav.Item>\n      </Nav>\n    </>\n  );\n};\n\nexport default Navegation;\n","import React from \"react\";\nimport \"./styles.scss\";\n\nconst Footer = () => {\n  return (\n    <>\n      <footer>\n        <p>Developed by Cesar Martinez 2020</p>\n      </footer>\n    </>\n  );\n};\n\nexport default Footer;\n","import React, { Fragment, useState, useEffect } from \"react\";\nimport Header from \"../../components/Header\";\nimport Nav from \"../../components/Navigation\";\nimport Footer from \"../../components/Footer\";\nimport { useSpring, animated as a } from \"react-spring\";\n\nimport \"./styles.scss\";\nconst Home = () => {\n  const [data, setData] = useState(35);\n  const props = useSpring({\n    // from: { display: \"absolute\", transform: \"scale(2)\" },\n    // transform: `scale(${data})`,\n    from: { fontSize: \"10rem\" },\n    fontSize: data,\n  });\n  function cutNumber(num) {\n    const MIN = 1;\n    const MAX = 950;\n    const parsed = parseInt(num);\n    return Math.min(Math.max(parsed, MIN), MAX);\n  }\n  function scrolling() {\n    window.addEventListener(\"scroll\", scrolling);\n    setData(cutNumber(document.documentElement.scrollTop));\n    console.log(document.documentElement.scrollTop);\n    console.log(data);\n  }\n  useEffect(() => {\n    scrolling();\n    return () => {\n      window.removeEventListener(\"scroll\", scrolling);\n    };\n  }, []);\n  return (\n    <Fragment>\n      <a.div style={props}>\n        <Header />\n      </a.div>\n      <Nav />\n      <p>asdada</p> <p>asdada</p>\n      <p>asdada</p>\n      <p>asdada</p>\n      <p>asdada</p>\n      <p>asdada</p>\n      <p>asdada</p>\n      <p>asdada</p>\n      <p>asdada</p>\n      <p>asdada</p>\n      <p>asdada</p>\n      <p>asdada</p>\n      <p>asdada</p>\n      <p>asdada</p>\n      <p>asdada</p>\n      <p>asdada</p>\n      <p>asdada</p>\n      <p>asdada</p>\n      <p>asdada</p>\n      <p>asdada</p>\n      <p>asdada</p>\n      <p>asdada</p>\n      <p>asdada</p>\n      <p>asdada</p>\n      <p>asdada</p>\n      <p>asdada</p>\n      <p>asdada</p>\n      <p>asdada</p>\n      <p>asdada</p>\n      <p>asdada</p>\n      <p>asdada</p>\n      <p>asdada</p>\n      <p>asdada</p>\n      <p>asdada</p>\n      <p>asdada</p>\n      <p>asdada</p>\n      <p>asdada</p>\n      <p>asdada</p>\n      <p>asdada</p>\n      <p>asdada</p>\n      <p>asdada</p>\n      <p>asdada</p>\n      <p>asdada</p>\n      <p>asdada</p>\n      <p>asdada</p>\n      <p>asdada</p>\n      <p>asdada</p>\n      <p>asdada</p>\n      <p>asdada</p>\n      <p>asdada</p>\n      <p>asdada</p>\n      <Footer />\n    </Fragment>\n  );\n};\n\nexport default Home;\n","import React from \"react\";\nimport Home from \"../containers/Home\";\nimport { HashRouter, Route, Switch } from \"react-router-dom\";\nimport \"./App.scss\";\n\nfunction App() {\n  return (\n    <HashRouter>\n      <Switch>\n        <Route exact path=\"/\" component={Home} />\n      </Switch>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const INITIAL_STATE = {};\n\nfunction RootReducer(state = INITIAL_STATE, action) {\n  switch (action.type) {\n    case \"\":\n      return {};\n\n    default:\n      return state;\n  }\n}\n\nexport default RootReducer;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./GlobalStyles.scss\";\nimport App from \"./routes/App.jsx\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { createStore } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport RootReducer from \"./components/reducers/RootReducer\";\nimport { ParallaxProvider } from \"react-scroll-parallax\";\n\nconst store = createStore(RootReducer);\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <ParallaxProvider>\n        <App />\n      </ParallaxProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}